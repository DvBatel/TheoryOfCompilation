; -- debug -- kdfmslkdnfm???!?int
; -- debug -- kdfmslkdnfm???!?int
; -- debug -- kdfmslkdnfm???!?int
; -- debug -- kdfmslkdnfm???!?byte
; -- debug -- binop 1 %t4
; -- debug -- kdfmslkdnfm???!?int
; -- debug -- kdfmslkdnfm???!?int
; -- debug -- kdfmslkdnfm???!?int
; -- debug -- kdfmslkdnfm???!?byte
; -- debug -- binop 1 %t9
; -- debug -- 17 bruhrurh %t16disco disco party party
; -- debug -- kdfmslkdnfm???!?int
; -- debug -- kdfmslkdnfm???!?int
; -- debug -- %t21 bruhrurh %t20disco disco party party
@.str0 = constant [5 x i8] c"good\00"@.str1 = constant [10 x i8] c"very good\00"@.str2 = constant [15 x i8] c"fail, im sorry\00"
@.DIV_BY_ZERO_ERROR = internal constant [23 x i8] c"Error division by zero\00"
define void @check_division(i32) {
%valid = icmp eq i32 %0, 0
br i1 %valid, label %ILLEGAL, label %LEGAL
ILLEGAL:
call void @print(i8* getelementptr([23 x i8], [23 x i8]* @.DIV_BY_ZERO_ERROR, i32 0, i32 0))
call void @exit(i32 0)
ret void
LEGAL:
ret void
}

@.intFormat = internal constant [4 x i8] c"%d\0A\00"
@.DIVIDE_BY_ZERO.str = internal constant [23 x i8] c"Error division by zero\00"

declare i32 @scanf(i8*, ...)
declare i32 @printf(i8*, ...)
declare void @exit(i32)

@.int_specifier_scan = constant [3 x i8] c"%d\00"
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"

define i32 @readi(i32){
%ret_val = alloca i32
%spec_ptr = getelementptr [3 x i8], [3 x i8]* @.int_specifier_scan, i32 0, i32 0
call i32 (i8*, ...) @scanf(i8* %spec_ptr, i32* %ret_val)
%val = load i32, i32* %ret_val
ret i32 %val
}

define void @printi(i32){
%spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
ret void
}

define void @print(i8*){
%spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
ret void
}

define i32 @plusser(i32 %arg0, i32 %arg1, i32 %arg2, i8 %arg3){
%t0 = alloca i32, i32 50
%t1 = add i32 9, %arg0
%t2 = add i32 %t1, %arg1
%t3 = add i32 %t2, %arg2
%t4 = zext i8 %arg3 to i32
%t5 = add i32 %t3, %t4
%t6 = add i32 %t5, %arg0
%t7 = add i32 %t6, %arg1
%t8 = add i32 %t7, %arg2
%t9 = zext i8 %arg3 to i32
%t10 = add i32 %t8, %t9
%t11 = add i32 0, %t10
%t12 = getelementptr i32, i32* %t0, i32 0
store i32 %t11, i32* %t12
%t13 = getelementptr i32, i32* %t0, i32 0
%t14 = load i32, i32* %t13
ret i32 %t14
}
define void @main(){
%t15 = alloca i32, i32 50
%t16 = call i32 @plusser(i32 1, i32 1, i32 1, i8 1)
%t17 = icmp eq i32 %t16, 17
br i1 %t17, label %label_0, label %label_1

label_0:
call void @print(i8* getelementptr ([5 x i8] , [5 x i8]* @.str0, i32 0, i32 0))
br label %label_1
label_1:
%t18 = call i32 @plusser(i32 2, i32 2, i32 2, i8 0)
%t19 = call i32 @plusser(i32 0, i32 1, i32 0, i8 1)
%t20 = add i32 %t18, %t19
%t21 = add i32 21, 13
%t22 = icmp eq i32 %t20, %t21
br i1 %t22, label %label_2, label %label_3

label_2:
call void @print(i8* getelementptr ([10 x i8] , [10 x i8]* @.str1, i32 0, i32 0))
br label %label_3
label_3:
call void @print(i8* getelementptr ([15 x i8] , [15 x i8]* @.str2, i32 0, i32 0))
ret void
}
